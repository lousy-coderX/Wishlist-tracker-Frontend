import { Component, EventEmitter, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { StarRating } from '../../services/star-rating';
import { StarRatingUtils } from '../../services/star-rating.utils';
import * as i0 from "@angular/core";
import * as i1 from "../../services/star-rating-config.service";
import * as i2 from "@angular/common";
const STAR_RATING_CONTROL_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => StarRatingControlComponent),
    multi: true,
};
export class StarRatingControlComponent extends StarRating {
    constructor(config) {
        super(config);
        //Outputs
        ///////////////////////////////////////////////////////////////////////////////////////////
        this.starClickChange = new EventEmitter();
        this.ratingChange = new EventEmitter();
        this.hoverRatingChange = new EventEmitter();
        this.onModelChangeRegistered = false;
        this.onTouchRegistered = false;
    }
    saveOnClick($event) {
        if (this.starClickChange) {
            this.starClickChange.emit($event);
        }
    }
    saveOnRatingChange($event) {
        if (this.ratingChange) {
            this.ratingChange.emit($event);
        }
    }
    saveOnHover($event) {
        if (this.hoverRatingChange) {
            this.hoverRatingChange.emit($event);
        }
    }
    saveOnTouch() {
        if (this.onTouchRegistered) {
            this.onTouch();
        }
    }
    saveOnModelChange(value) {
        if (this.onModelChangeRegistered) {
            this.onModelChange(value);
        }
    }
    /**ACCESSIBILITY **/
    //Keyboard events
    onKeyDown(event) {
        if (!this.interactionPossible()) {
            return;
        }
        const handlers = {
            //Decrement
            Minus: () => this.decrement(),
            ArrowDown: () => this.decrement(),
            ArrowLeft: () => this.decrement(),
            //Increment
            Plus: () => this.increment(),
            ArrowRight: () => this.increment(),
            ArrowUp: () => this.increment(),
            //Reset
            Backspace: () => this.reset(),
            Delete: () => this.reset(),
            Digit0: () => this.reset(),
        };
        const handleDigits = (eventCode) => {
            const dStr = 'Digit';
            const digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);
            this.rating = digit;
        };
        if (handlers[event['code']] ||
            StarRatingUtils.isDigitKeyEventCode(event['code'])) {
            if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {
                handleDigits(event['code']);
            }
            else {
                handlers[event['code']]();
            }
            event.preventDefault();
            event.stopPropagation();
        }
        this.saveOnTouch();
    }
    //Focus events
    onBlur(event) {
        this.focus = false;
        event.preventDefault();
        event.stopPropagation();
        this.saveOnTouch();
    }
    onFocus(event) {
        this.focus = true;
        event.preventDefault();
        event.stopPropagation();
        this.saveOnTouch();
    }
    //Hover events
    onStarHover(rating) {
        if (!this.interactionPossible() || !this.hoverEnabled) {
            return;
        }
        this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0;
        //fire onHoverRatingChange event
        const $event = { hoverRating: this.hoverRating };
        this.saveOnHover($event);
    }
    /**Form Control - ControlValueAccessor implementation**/
    writeValue(obj) {
        this.rating = obj;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
        this.onModelChangeRegistered = true;
    }
    registerOnTouched(fn) {
        this.onTouch = fn;
        this.onTouchRegistered = true;
    }
    //Overrides
    setRating(value) {
        const initValue = this.rating;
        super.setRating(value);
        //if value changed trigger valueAccessor events and outputs
        if (initValue !== this.rating) {
            const $event = { rating: this.rating };
            this.saveOnRatingChange($event);
            this.saveOnModelChange(this.rating);
        }
    }
    /**
     * onStarClicked
     *
     * Is fired when a star is clicked. And updated the rating value.
     * This function returns if the disabled or readOnly
     * property is set. If provided it emits the onClick event
     * handler with the actual rating value.
     *
     * @param rating
     */
    onStarClicked(rating) {
        //fire onClick event
        if (!this.interactionPossible()) {
            return;
        }
        this.rating = rating;
        const onClickEventObject = {
            rating: this.rating,
        };
        this.saveOnClick(onClickEventObject);
    }
}
StarRatingControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StarRatingControlComponent, deps: [{ token: i1.StarRatingConfigService }], target: i0.ɵɵFactoryTarget.Component });
StarRatingControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.0", type: StarRatingControlComponent, selector: "star-rating-control", inputs: { getHalfStarVisible: "getHalfStarVisible", getColor: "getColor", showHalfStars: "showHalfStars", hoverEnabled: "hoverEnabled", rating: "rating", step: "step", disabled: "disabled", readOnly: "readOnly", space: "space", starType: "starType", size: "size", speed: "speed", numOfStars: "numOfStars", direction: "direction", staticColor: "staticColor", labelPosition: "labelPosition", labelText: "labelText", id: "id" }, outputs: { starClickChange: "starClickChange", ratingChange: "ratingChange", hoverRatingChange: "hoverRatingChange" }, providers: [STAR_RATING_CONTROL_ACCESSOR], usesInheritance: true, ngImport: i0, template: "<div id=\"{{id}}\" class=\"rating {{getComponentClassNames()}}\" tabindex=\"0\"\n  (keydown)=\"onKeyDown($event)\" (blur)=\"onBlur($event)\"\n  (focus)=\"onFocus($event)\" (mouseleave)=\"onStarHover(0)\">\n  <div *ngIf=\"labelText\" class=\"label-value\">{{labelText}}</div>\n  <div class=\"star-container\">\n    <div class=\"star\" (mouseenter)=\"onStarHover(star)\"\n      *ngFor=\"let star of stars\" (click)=\"onStarClicked(star)\">\n      <i *ngIf=\"!svgVisible()\" class=\"star-empty {{classEmpty}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-half {{classHalf}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-filled {{classFilled}}\"></i>\n      <svg *ngIf=\"svgVisible()\" class=\"star-empty\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathEmpty\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-half\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathHalf\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-filled\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathFilled\"></use>\n      </svg>\n    </div>\n  </div>\n</div>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: StarRatingControlComponent, decorators: [{
            type: Component,
            args: [{ selector: 'star-rating-control', providers: [STAR_RATING_CONTROL_ACCESSOR], inputs: [
                        'getHalfStarVisible',
                        'getColor',
                        'showHalfStars',
                        'hoverEnabled',
                        'rating',
                        'step',
                        'disabled',
                        'readOnly',
                        'space',
                        'starType',
                        'size',
                        'speed',
                        'numOfStars',
                        'direction',
                        'staticColor',
                        //, 'labelVisible'
                        'labelPosition',
                        'labelText',
                        'id',
                    ], outputs: ['starClickChange', 'ratingChange', 'hoverRatingChange'], template: "<div id=\"{{id}}\" class=\"rating {{getComponentClassNames()}}\" tabindex=\"0\"\n  (keydown)=\"onKeyDown($event)\" (blur)=\"onBlur($event)\"\n  (focus)=\"onFocus($event)\" (mouseleave)=\"onStarHover(0)\">\n  <div *ngIf=\"labelText\" class=\"label-value\">{{labelText}}</div>\n  <div class=\"star-container\">\n    <div class=\"star\" (mouseenter)=\"onStarHover(star)\"\n      *ngFor=\"let star of stars\" (click)=\"onStarClicked(star)\">\n      <i *ngIf=\"!svgVisible()\" class=\"star-empty {{classEmpty}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-half {{classHalf}}\"></i>\n      <i *ngIf=\"!svgVisible()\" class=\"star-filled {{classFilled}}\"></i>\n      <svg *ngIf=\"svgVisible()\" class=\"star-empty\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathEmpty\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-half\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathHalf\"></use>\n      </svg>\n      <svg *ngIf=\"svgVisible()\" class=\"star-filled\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          [attr.xlink:href]=\"pathFilled\"></use>\n      </svg>\n    </div>\n  </div>\n</div>\n", styles: [] }]
        }], ctorParameters: function () { return [{ type: i1.StarRatingConfigService }]; } });
//# sourceMappingURL=data:application/json;base64,