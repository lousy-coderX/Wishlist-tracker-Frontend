export class StarRatingUtils {
    //Static methods
    ///////////////////////////////////////////////////////////////////////////////////////////
    /*
     * getStarsArray
     *
     * returns an array of increasing numbers starting at 1
     *
     * @param numOfStars
     * @returns {Array}
     */
    static getStarsArray(numOfStars) {
        let stars = [];
        for (let i = 0; i < numOfStars; i++) {
            stars.push(i + 1);
        }
        return stars;
    }
    /*
     * getHalfStarVisible
     *
     * Returns true if there should be a half star visible, and false if not.
     *
     * @param rating
     * @returns {boolean}
     */
    static getHalfStarVisible(rating) {
        return Math.abs(rating % 1) > 0;
    }
    /*
     * getColor
     *
     * The default function for color calculation
     * based on the current rating and the the number of stars possible.
     * If a staticColor is set the function will use it as return value.
     *
     * @param rating
     * @param numOfStars
     * @param staticColor
     * @returns {starRatingColor}
     */
    static getColor(rating, numOfStars, staticColor) {
        rating = rating || 0;
        //if a fix color is set use this one
        if (staticColor) {
            return staticColor;
        }
        //calculate size of smallest fraction
        let fractionSize = numOfStars / 3;
        //apply color by fraction
        let color = 'default';
        if (rating > 0) {
            color = 'negative';
        }
        if (rating > fractionSize) {
            color = 'ok';
        }
        if (rating > fractionSize * 2) {
            color = 'positive';
        }
        return color;
    }
    /*
     * isDigitKeyEventCode
     * detects digit key event sodes
     * @param eventCode
     * @returns {boolean}
     */
    static isDigitKeyEventCode(eventCode) {
        return eventCode.indexOf('Digit') === 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhci1yYXRpbmcudXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItc3Rhci1yYXRpbmcvc3JjL3NlcnZpY2VzL3N0YXItcmF0aW5nLnV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE1BQU0sT0FBTyxlQUFlO0lBQzFCLGdCQUFnQjtJQUNoQiwyRkFBMkY7SUFFM0Y7Ozs7Ozs7T0FPRztJQUNILE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBa0I7UUFDckMsSUFBSSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztRQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ25CO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxNQUFjO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7T0FXRztJQUNILE1BQU0sQ0FBQyxRQUFRLENBQ2IsTUFBYyxFQUNkLFVBQWtCLEVBQ2xCLFdBQTZCO1FBRTdCLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxDQUFDO1FBRXJCLG9DQUFvQztRQUNwQyxJQUFJLFdBQVcsRUFBRTtZQUNmLE9BQU8sV0FBVyxDQUFDO1NBQ3BCO1FBRUQscUNBQXFDO1FBQ3JDLElBQUksWUFBWSxHQUFHLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFFbEMseUJBQXlCO1FBQ3pCLElBQUksS0FBSyxHQUFvQixTQUFTLENBQUM7UUFDdkMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2QsS0FBSyxHQUFHLFVBQVUsQ0FBQztTQUNwQjtRQUNELElBQUksTUFBTSxHQUFHLFlBQVksRUFBRTtZQUN6QixLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ2Q7UUFDRCxJQUFJLE1BQU0sR0FBRyxZQUFZLEdBQUcsQ0FBQyxFQUFFO1lBQzdCLEtBQUssR0FBRyxVQUFVLENBQUM7U0FDcEI7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFpQjtRQUMxQyxPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHN0YXJSYXRpbmdDb2xvciB9IGZyb20gJy4uL2ludGVyZmFjZXMvc3Rhci1yYXRpbmctY29uZmlnLmludGVyZmFjZSc7XG5leHBvcnQgY2xhc3MgU3RhclJhdGluZ1V0aWxzIHtcbiAgLy9TdGF0aWMgbWV0aG9kc1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLypcbiAgICogZ2V0U3RhcnNBcnJheVxuICAgKlxuICAgKiByZXR1cm5zIGFuIGFycmF5IG9mIGluY3JlYXNpbmcgbnVtYmVycyBzdGFydGluZyBhdCAxXG4gICAqXG4gICAqIEBwYXJhbSBudW1PZlN0YXJzXG4gICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICovXG4gIHN0YXRpYyBnZXRTdGFyc0FycmF5KG51bU9mU3RhcnM6IG51bWJlcik6IEFycmF5PG51bWJlcj4ge1xuICAgIGxldCBzdGFyczogQXJyYXk8bnVtYmVyPiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtT2ZTdGFyczsgaSsrKSB7XG4gICAgICBzdGFycy5wdXNoKGkgKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJzO1xuICB9XG5cbiAgLypcbiAgICogZ2V0SGFsZlN0YXJWaXNpYmxlXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBzaG91bGQgYmUgYSBoYWxmIHN0YXIgdmlzaWJsZSwgYW5kIGZhbHNlIGlmIG5vdC5cbiAgICpcbiAgICogQHBhcmFtIHJhdGluZ1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBnZXRIYWxmU3RhclZpc2libGUocmF0aW5nOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gTWF0aC5hYnMocmF0aW5nICUgMSkgPiAwO1xuICB9XG5cbiAgLypcbiAgICogZ2V0Q29sb3JcbiAgICpcbiAgICogVGhlIGRlZmF1bHQgZnVuY3Rpb24gZm9yIGNvbG9yIGNhbGN1bGF0aW9uXG4gICAqIGJhc2VkIG9uIHRoZSBjdXJyZW50IHJhdGluZyBhbmQgdGhlIHRoZSBudW1iZXIgb2Ygc3RhcnMgcG9zc2libGUuXG4gICAqIElmIGEgc3RhdGljQ29sb3IgaXMgc2V0IHRoZSBmdW5jdGlvbiB3aWxsIHVzZSBpdCBhcyByZXR1cm4gdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSByYXRpbmdcbiAgICogQHBhcmFtIG51bU9mU3RhcnNcbiAgICogQHBhcmFtIHN0YXRpY0NvbG9yXG4gICAqIEByZXR1cm5zIHtzdGFyUmF0aW5nQ29sb3J9XG4gICAqL1xuICBzdGF0aWMgZ2V0Q29sb3IoXG4gICAgcmF0aW5nOiBudW1iZXIsXG4gICAgbnVtT2ZTdGFyczogbnVtYmVyLFxuICAgIHN0YXRpY0NvbG9yPzogc3RhclJhdGluZ0NvbG9yXG4gICk6IHN0YXJSYXRpbmdDb2xvciB7XG4gICAgcmF0aW5nID0gcmF0aW5nIHx8IDA7XG5cbiAgICAvL2lmIGEgZml4IGNvbG9yIGlzIHNldCB1c2UgdGhpcyBvbmVcbiAgICBpZiAoc3RhdGljQ29sb3IpIHtcbiAgICAgIHJldHVybiBzdGF0aWNDb2xvcjtcbiAgICB9XG5cbiAgICAvL2NhbGN1bGF0ZSBzaXplIG9mIHNtYWxsZXN0IGZyYWN0aW9uXG4gICAgbGV0IGZyYWN0aW9uU2l6ZSA9IG51bU9mU3RhcnMgLyAzO1xuXG4gICAgLy9hcHBseSBjb2xvciBieSBmcmFjdGlvblxuICAgIGxldCBjb2xvcjogc3RhclJhdGluZ0NvbG9yID0gJ2RlZmF1bHQnO1xuICAgIGlmIChyYXRpbmcgPiAwKSB7XG4gICAgICBjb2xvciA9ICduZWdhdGl2ZSc7XG4gICAgfVxuICAgIGlmIChyYXRpbmcgPiBmcmFjdGlvblNpemUpIHtcbiAgICAgIGNvbG9yID0gJ29rJztcbiAgICB9XG4gICAgaWYgKHJhdGluZyA+IGZyYWN0aW9uU2l6ZSAqIDIpIHtcbiAgICAgIGNvbG9yID0gJ3Bvc2l0aXZlJztcbiAgICB9XG5cbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICAvKlxuICAgKiBpc0RpZ2l0S2V5RXZlbnRDb2RlXG4gICAqIGRldGVjdHMgZGlnaXQga2V5IGV2ZW50IHNvZGVzXG4gICAqIEBwYXJhbSBldmVudENvZGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNEaWdpdEtleUV2ZW50Q29kZShldmVudENvZGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBldmVudENvZGUuaW5kZXhPZignRGlnaXQnKSA9PT0gMDtcbiAgfVxufVxuIl19